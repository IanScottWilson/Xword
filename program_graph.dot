digraph Xprojcore {
	"get-wordlist" -> "strip-dos-yuk";
	"get-word-file" -> "get-wordlist";
	"def i18n" -> "make-eng-tt";
	"total-parse" -> "null-str?";
	"my-rpn-seq" -> "my-rpn";
	"total-parse" -> "my-rpn";
	"total-parse" -> "my-rpn-seq" ;
	"word-to-sym-seq" -> "total-parse";
	"sort-wordlist" -> "word-to-sym-seq";
        "cross-set-sym-lang" -> "word-to-sym-seq";
        "word-to-sym-seq" -> "word-to-sym-seq";
        "partial-puzzle-sym-lang" -> "word-to-sym-seq";
        "mpv" -> "word-to-sym-seq";
        "count-lang" -> "word-to-sym-seq";
        "wordlist-as-symbols" -> "word-to-sym-seq";
	"to-std-form" -> "sym-seq-to-str";
	"doit" -> "wordlist-as-symbols";
	"wordlist-as-symbols" -> "wordlist-as-symbols";
	"sort-wordlist" -> "sort-wordlist";
	"get-sort-method" -> "sort-wordlist-sym";
        "xword-engine" -> "sort-wordlist-sym";
	"dfc" -> "count-lang";
	"dfc" -> "dfc";
	"pavelize" -> "count-lang";
	"span-set" -> "count-lang";
	"count-lang" -> "count-lang";
	"heuristic-sort-lang" -> "dfc";
	"heuristic-sym-sort" -> "dfc-sym";
	"exclusion-zone" -> "occupies";
	"occupies-with-contents-l" -> "occupies";
	"truex-l?" -> "occupies";
	"elim-abuts-l" ->  "occupies";
	"all-cells-in-direction-l" ->  "occupies";
	"clash-l?" -> "occupies-with-contents-l";
	"exclusion-zone" -> "v-cells-adjacent";
	"v-ends" -> "v-cells-adjacent";
	"exclusion-zone" ->  "v-ends";
	"clash-l?" -> "not-opposite?";
	"place-in-grid" -> "other-direction";
	"check-xwords-lang" ->  "other-direction";
	"transpose-grid" -> "other-direction";
	"place-in-grid-old" -> "other-direction";
	"validates-lang" -> "other-direction";
	"check-xwords-lang" -> "clash-l?";
	"can-cross-sym-lang?" -> "cross-set-sym-lang";
	"cross-set-sym-lang" -> "cross-set-sym-lang";
	"partial-puzzle-sym-lang" -> "cross-set-sym-lang";
	"partial-puzzle-sym-lang" -> "can-cross-sym-lang?";
	"partial-puzzle-sym-lang" -> "indices-of";
	"partial-puzzle-sym-f" -> "indices-of";
	"partial-puzzle-sym-lang" -> "partial-puzzle-sym-lang";
	"fit-word" -> "partial-puzzle-sym-f";
	"heuristic-sort-lang" ->"heuristic-sort-lang";
	"fit-word" -> "heuristic-sym-sort";
	"place-in-grid" -> "get-new-start-cell";
	"place-in-grid-old" -> "get-new-start-cell";
	"validates-lang" -> "get-new-start-cell";
	"check-xwords-lang" -> "all-in-direction";
	"all-cells-in-direction-l" -> "all-in-direction";
	"validates-lang" -> "all-cells-in-direction-l";
	"check-xwords-lang" -> "between";
	"elim-abuts-l" -> "truex-l?";
        "check-xwords-lang" -> "elim-abuts-l";
	"validates-lang" -> "check-xwords-lang";
	"fit-word" -> "validates-lang";
	"end-to-body?" -> "my-xor";
	"get-working-copies" -> "which-if-end?";
	"end-to-body?" -> "which-if-end?";
	"get-working-copies" -> "end-to-body?";
	"place-in-grid" -> "get-working-copies";
	"fit-word" -> "place-in-grid";
	"xword-engine" -> "fit-word";
	"get-sort-method" -> "l-identity";
	"get-sort-method" -> "l-shuffle";
	"xword-engine" -> "prep-list";
	"doit" -> "xword-engine";
	"pavelize" -> "max-nsew";
	"user-shift-grid" -> "max-nsew";
	"matrics-from-grid" -> "max-nsew";
	"matrics-from-grid" -> "new-matrics-nil";
	"display" -> "pp-matrics";
	"change-vec-by-vec" -> "overflow?";
	"matrics-from-grid" -> "transpose";
	"matrics-from-grid" -> "insert-word-in-grid-v";
	"matrics-from-grid" -> "mpv";
	"pavelize" -> "shift-grid";
	"user-shift-grid" -> "shift-grid";
	"matrics-from-grid" -> "shift-grid";
	"total-span-set-dir" -> "span-set";
	"height-this-matrics" -> "total-span-set-dir";
	"width-this-matrics" -> "total-span-set-dir";
	"matrics-from-grid" -> "width-this-matrics";
	"js-dims" -> "width-this-matrics";
	"matrics-from-grid" -> "height-this-matrics";
	"js-dims" -> "height-this-matrics";
	"transpose-grid" -> "invert-v";
	"matrics-from-grid" -> "invert-v";
	"pavelize" -> "resort-grid-keys";
	"js-output-np" -> "js-dims";
	"input-loop1" -> "js-output-np";
	"spit-html" ->  "js-output-np";
	"js-output" -> "js-output-np";
	"offer-output-v" -> "js-output";
	"input-loop1" -> "matrics-from-grid";
	"display" -> "matrics-from-grid";
	"offer-output-v" -> "display";
	"input-loop1" -> "doit";
	"input-loop1" -> "user-shift-grid";
	"offer-output-v" -> "user-shift-grid";
	"offer-output-v" -> "spit-html";
	"input-loop2-v" -> "offer-output-v";
	"input-loop1" -> "get-word-file";
	"input-loop1" -> "get-language";
	"input-loop1" -> "get-sort-method";
	"input-loop1" -> "to-std-form";
	"input-loop2-v" -> "input-loop1";
	"croesair" -> "input-loop1";
	"input-loop2-v" -> "exit";
	"input-loop1" -> "input-loop2-v";
	"croesair" -> "input-loop2-v" [label="is this ever traversed?"];
	"-main" -> "croesair";
	"input-loop2-v" -> "transpose-grid";
	"elim-abuts-l" -> "exclusion-zone";
	"validates-lang" -> "exclusion-zone";
	"insert-word-in-grid-v" -> "change-vec-by-vec";
	"js-output-np" -> "pavelize";
	
  	

}